"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IpNotationUtils = exports.IPV6_BYTE_COUNT = exports.IPV6_PART_COUNT = exports.IPV4_BYTE_COUNT = exports.IPV4_PART_COUNT = void 0;
var byte_array_utils_1 = require("./byte-array-utils");
exports.IPV4_PART_COUNT = 4;
exports.IPV4_BYTE_COUNT = 4;
exports.IPV6_PART_COUNT = 8;
exports.IPV6_BYTE_COUNT = 16;
var IpNotationUtils = /** @class */ (function () {
    function IpNotationUtils() {
    }
    IpNotationUtils.regularNotationV4 = function (bytes) {
        byte_array_utils_1.ByteArrayUtils.validate(bytes, exports.IPV4_BYTE_COUNT);
        return bytes.join('.');
    };
    IpNotationUtils.shortNotationV4 = function (bytes) {
        return this.regularNotationV4(bytes);
    };
    IpNotationUtils.fullNotationV4 = function (bytes) {
        var _this = this;
        byte_array_utils_1.ByteArrayUtils.validate(bytes, exports.IPV4_BYTE_COUNT);
        return bytes.map(function (b) { return _this.padLeft(b.toString(), 3); }).join('.');
    };
    IpNotationUtils.regularNotationV6 = function (bytes) {
        byte_array_utils_1.ByteArrayUtils.validate(bytes, exports.IPV6_BYTE_COUNT);
        var strParts = new Array(exports.IPV6_PART_COUNT);
        for (var i = 0; i < exports.IPV6_PART_COUNT; ++i) {
            strParts[i] = byte_array_utils_1.ByteArrayUtils.bytePairToHex(bytes[i * 2], bytes[i * 2 + 1]);
        }
        return strParts.join(':');
    };
    IpNotationUtils.shortNotationV6 = function (bytes) {
        var regularNotation = this.regularNotationV6(bytes);
        var maxZeroSeqStart = -1;
        var maxZeroSeqLen = 0;
        var zeroSeqRe = /(^|:)0(:0)+($|:)/g;
        var m;
        while ((m = zeroSeqRe.exec(regularNotation)) !== null) {
            if (maxZeroSeqStart < 0 || (m[0].length >> 1) > (maxZeroSeqLen >> 1)) {
                maxZeroSeqStart = m.index;
                maxZeroSeqLen = m[0].length;
            }
        }
        return maxZeroSeqStart < 0 ? regularNotation :
            regularNotation.substr(0, maxZeroSeqStart) + '::' + regularNotation.substr(maxZeroSeqStart + maxZeroSeqLen);
    };
    IpNotationUtils.fullNotationV6 = function (bytes) {
        byte_array_utils_1.ByteArrayUtils.validate(bytes, exports.IPV6_BYTE_COUNT);
        var strParts = new Array(exports.IPV6_PART_COUNT);
        for (var i = 0; i < exports.IPV6_PART_COUNT; ++i) {
            strParts[i] = this.padLeft(byte_array_utils_1.ByteArrayUtils.bytePairToHex(bytes[i * 2], bytes[i * 2 + 1]), 4);
        }
        return strParts.join(':');
    };
    IpNotationUtils.padLeft = function (s, size) {
        return s.length >= size ? s : '0'.repeat(size - s.length) + s;
    };
    return IpNotationUtils;
}());
exports.IpNotationUtils = IpNotationUtils;
